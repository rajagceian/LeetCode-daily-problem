class Solution {
public:
    int minimizeXor(int num1, int num2) {
        int set_bits_num2 = __builtin_popcount(num2);
        int ans = 0;

        // Step 1: Use bits of num1 as much as possible to minimize XOR
        for (int i = 31; i >= 0 && set_bits_num2 > 0; --i) {
            if (num1 & (1 << i)) { // If the bit is set in num1
                ans |= (1 << i);  // Set the same bit in ans
                set_bits_num2--;  // Decrease the count of set bits needed
            }
        }

        // Step 2: Add additional bits from least significant position if needed
        for (int i = 0; i < 32 && set_bits_num2 > 0; ++i) {
            if (!(ans & (1 << i))) { // If the bit is not already set in ans
                ans |= (1 << i);    // Set the bit
                set_bits_num2--;    // Decrease the count of set bits needed
            }
        }

        return ans;
    }
};
