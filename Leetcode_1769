***********************  Brute - force **************Cpp******************
class Solution {
public:
    vector<int> minOperations(string boxes) {
       int n=boxes.length();
       vector <int> ans(n,0);
       for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(i==j) continue;
            if(boxes[j]=='1'){
                ans[i]+=abs(j-i);
            }
        }
       }
       return ans; 
    }
};

*************************** Optimized solution *********************** Cpp *************
class Solution {
public:
    vector<int> minOperations(string boxes) {
        int n = boxes.length();
        vector<int> ans(n, 0);
        vector<int> left(n, 0), right(n, 0);

        // Compute the left cumulative weights
        left[0] = boxes[0] - '0';
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + (boxes[i] - '0');
        }
        for (int i = 1; i < n; i++) {
            left[i] += left[i - 1];
        }

        // Compute the right cumulative weights
        right[n - 1] = boxes[n - 1] - '0';
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + (boxes[i] - '0');
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] += right[i + 1];
        }

        // Calculate the result for each position
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                ans[i] += left[i - 1];
            }
            if (i < n - 1) {
                ans[i] += right[i + 1];
            }
        }

        return ans;
    }
};
