class Solution {
public:
    bool canAllocate(vector<int>& candies, long long k, int mid) {
        if (mid == 0) return true; // Prevent division by zero
        long long count = 0;
        for (int candy : candies) {
            count += candy / mid;  // Count how many children can get 'mid' candies
        }
        return count >= k; // If we can allocate to at least k children, return true
    }

    int maximumCandies(vector<int>& candies, long long k) {
        long long sum = 0;
        int highest_ele = INT_MIN;
        for (int candy : candies) {
            highest_ele = max(highest_ele, candy);
            sum += candy;
        }

        if (k > sum) return 0; // If total candies are less than k, return 0

        int lo = 1, hi = highest_ele;
        int result = 0;

        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (canAllocate(candies, k, mid)) {
                result = mid;   // Store valid mid
                lo = mid + 1;   // Try for a larger value
            } else {
                hi = mid - 1;   // Decrease mid
            }
        }

        return result;
    }
};
