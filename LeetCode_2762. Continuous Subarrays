//2762. Continuous Subarrays
class Solution {
public:
    long long continuousSubarrays(vector<int>& nums) {
        int n = nums.size();
        long long count = 0;
        int start = 0;
        deque<int> maxDeque; 
        deque<int> minDeque;
        for (int end = 0; end < n; ++end) {
            while (!maxDeque.empty() && nums[maxDeque.back()] <= nums[end])
                maxDeque.pop_back();
            maxDeque.push_back(end);
            while (!minDeque.empty() && nums[minDeque.back()] >= nums[end])
                minDeque.pop_back();
            minDeque.push_back(end);
            while (nums[maxDeque.front()] - nums[minDeque.front()] > 2) {
                if (maxDeque.front() == start) maxDeque.pop_front();
                if (minDeque.front() == start) minDeque.pop_front();
                start++;
            }
            count += (end - start + 1);
        }
        return count;
    }
};
